security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

    providers:
        users_in_memory:
            memory:
                users:
                    admin@local: { password: 'admin', roles: ['ROLE_ADMIN'] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

#        main:
#            lazy: true
#            provider: users_in_memory
#        main:
#            stateless: true
#            provider: users_in_memory
#            json_login:
#                check_path: /authentication_token
#                username_path: email
#                password_path: password
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
#    access_control:
#        - { path: ^/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY }                     # L'accès à la documentation est libre
#        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }     # Les utilisateurs non-authentifiés peuvent accéder au formulaire d'authentification
#        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }                               # Tout le reste de l'api nécessite au moins d'être connecté

    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }