# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Service de filtres de recherche de livres
    book.search_filter:
        parent: 'api_platform.doctrine.orm.search_filter'
        arguments: [ { id: 'exact', title: 'partial', author.name: 'partial', isbn: 'partial', inSell: 'exact', tags.label: 'exact' } ]
        tags:  [ 'api_platform.filter' ]
        autowire: false
        autoconfigure: false
        public: false

    # Service de tri sur les livres
    book.order_filter:
        parent: 'api_platform.doctrine.orm.order_filter'
        arguments:
            $properties: { id: ~, title: ~, author.name: ~, pagesCount: ~, isbn: ~, inSell: ~ }
            $orderParameterName: order
        tags:  [ 'api_platform.filter' ]
        autowire: false
        autoconfigure: false
        public: false

    # Réécrit la réponse lors de l'envoi du token
    app.listener.authentication_success_response:
        class: App\Service\AuthentificationListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }